//
//  AcknowPodParserTests.swift
//  AcknowExampleTests
//
//  Created by Vincent Tourraine on 15/08/15.
//  Copyright Â© 2015-2022 Vincent Tourraine. All rights reserved.
//

import XCTest

@testable import AcknowList

class AcknowPodParserTests: XCTestCase {

    func testHeaderFooter() throws {
        let bundle = resourcesBundle()
        let path = try XCTUnwrap(bundle.path(forResource: "Pods-acknowledgements", ofType: "plist"))
        let parser = AcknowPodParser(plistPath: path)
        XCTAssertNotNil(parser)

        let headerFooter = parser.parseHeaderAndFooter()
        if let header = headerFooter.header,
           let footer = headerFooter.footer {
            XCTAssertEqual(header, "This application makes use of the following third party libraries:")
            XCTAssertEqual(footer, "Generated by CocoaPods - https://cocoapods.org")
        }
        else {
            XCTAssert(false, "Header/footer not found")
        }
    }

    func testAcknowledgements() throws {
        let bundle = resourcesBundle()
        let path = try XCTUnwrap(bundle.path(forResource: "Pods-acknowledgements", ofType: "plist"))
        let parser = AcknowPodParser(plistPath: path)
        XCTAssertNotNil(parser)

        let acknowledgements = parser.parseAcknowledgements()
        XCTAssertEqual(acknowledgements.count, 3)

        let acknow = acknowledgements.first
        if let acknow = acknow {
            XCTAssertEqual(acknow.title, "AcknowList (1)")
            let text = try XCTUnwrap(acknow.text)
            XCTAssertTrue(text.hasPrefix("Copyright (c) 2015-2019 Vincent Tourraine (http://www.vtourraine.net)"))
        }
        else {
            XCTAssert(false, "Acknowledgement not found")
        }
    }

    // To test the somewhat complicated extraneous-newline-removing regex, I have:
    //
    //  (1) Made a temporary project and installed the 5 most popular pods that
    //      had no dependencies (loosely based on https://trendingcocoapods.github.io -
    //      scroll down to the "Top CocoaPods" section). I skipped pods with duplicate
    //      licenses.
    //
    //      Ultimately, I installed: TYPFontAwesome (SIL OFL 1.1), pop (BSD),
    //      Alamofire (MIT), Charts (Apache 2), and TPKeyboardAvoiding (zLib)
    //
    //  (2) Copied the acknowledgements file over to Pods-acknowledgements-RegexTesting.plist
    //
    //  (3) Created this test, which parses the plist and applies the regex, then
    //      verifies that the generated strings are correct verus a manually edited
    //      "ground truth" text file.
    func testFilterOutPrematureLineBreaks() throws {
        let bundle = resourcesBundle()
        let plistPath = try XCTUnwrap(bundle.path(forResource: "Pods-acknowledgements-RegexTesting", ofType: "plist"))

        let parser = AcknowPodParser(plistPath: plistPath)
        XCTAssertNotNil(parser)

        let acknowledgements = parser.parseAcknowledgements()
        XCTAssertEqual(acknowledgements.count, 5)

        // For each acknowledgement, load the ground truth and compare...
        for acknowledgement in acknowledgements {
            let groundTruthPath = bundle.url(forResource: "RegexTesting-GroundTruth-\(acknowledgement.title)", withExtension: "txt")
            do {
                let groundTruth = try String(contentsOf: groundTruthPath!, encoding: .utf8)
                XCTAssertEqual(acknowledgement.text, groundTruth)
            }
            catch {
                XCTFail("Cannot load ground truth")
            }
        }
    }
    
    func testGeneralPerformance() throws {
        let bundle = resourcesBundle()
        let path = try XCTUnwrap(bundle.path(forResource: "Pods-acknowledgements", ofType: "plist"))

        self.measure() {
            let parser = AcknowPodParser(plistPath: path)
            _ = parser.parseHeaderAndFooter()
            _ = parser.parseAcknowledgements()
        }
    }

    func testParseNonExistentFile() {
        let parser = AcknowPodParser(plistPath: "/404")
        XCTAssertNil(parser.parseHeaderAndFooter().header)
        XCTAssertNil(parser.parseHeaderAndFooter().footer)
        XCTAssertTrue(parser.parseAcknowledgements().isEmpty)
    }
}
