//
//  AcknowParserTests.swift
//  AcknowExampleTests
//
//  Created by Vincent Tourraine on 15/08/15.
//  Copyright Â© 2015-2017 Vincent Tourraine. All rights reserved.
//

import UIKit
import XCTest

import AcknowList

class AcknowParserTests: XCTestCase {

    func testHeaderFooter() {
        let bundle = Bundle(for: AcknowParserTests.self)
        let path = bundle.path(forResource: "Pods-acknowledgements", ofType: "plist")
        if let path = path {
            let parser = AcknowParser(plistPath: path)
            XCTAssertNotNil(parser)

            let headerFooter = parser.parseHeaderAndFooter()
            if let header = headerFooter.header,
                let footer = headerFooter.footer {
                    XCTAssertEqual(header, "This application makes use of the following third party libraries:")
                    XCTAssertEqual(footer, "Generated by CocoaPods - https://cocoapods.org")
            }
            else {
                XCTAssert(false, "Header/footer not found")
            }
        }
        else {
            XCTAssert(false, "Plist not found")
        }
    }

    func testAcknowledgements() {
        let bundle = Bundle(for: AcknowParserTests.self)
        let path = bundle.path(forResource: "Pods-acknowledgements", ofType: "plist")
        if let path = path {
            let parser = AcknowParser(plistPath: path)
            XCTAssertNotNil(parser)

            let acknowledgements = parser.parseAcknowledgements()
            XCTAssertEqual(acknowledgements.count, 1)

            let acknow = acknowledgements.first
            if let acknow = acknow {
                XCTAssertEqual(acknow.title, "AcknowList")
                XCTAssertTrue(acknow.text.hasPrefix("Copyright (c) 2015-2018 Vincent Tourraine (http://www.vtourraine.net)"))
            }
            else {
                XCTAssert(false, "Acknowledgement not found")
            }
        }
        else {
            XCTAssert(false, "Plist not found")
        }
    }

    // To test the somewhat complicated extraneous-newline-removing regex, I have:
    //
    //  (1) Made a temporary project and installed the 5 most popular pods that
    //      had no dependencies (loosely based on https://trendingcocoapods.github.io -
    //      scroll down to the "Top CocoaPods" section). I skipped pods with duplicate
    //      licenses.
    //
    //      Ultimately, I installed: TYPFontAwesome (SIL OFL 1.1), pop (BSD),
    //      Alamofire (MIT), Charts (Apache 2), and TPKeyboardAvoiding (zLib)
    //
    //  (2) Copied the acknowledgements file over to Pods-acknowledgements-RegexTesting.plist
    //
    //  (3) Created this test, which parses the plist and applies the regex, then
    //      verifies that the generated strings are correct verus a manually edited
    //      "ground truth"
    func testNewlineRegex() {
        let bundle = Bundle(for: AcknowParserTests.self)
        let plistPath = bundle.path(forResource: "Pods-acknowledgements-RegexTesting", ofType: "plist")
        let gtPath = bundle.path(forResource: "Pods-acknowledgements-RegexTesting-GroundTruth", ofType: "strings")

        if let plistPath = plistPath, let gtPath = gtPath {
            let parser = AcknowParser(plistPath: plistPath)
            XCTAssertNotNil(parser)

            let acknowledgements = parser.parseAcknowledgements()
            XCTAssertEqual(acknowledgements.count, 5)

            // For each acknowledgement, load the ground truth and compare...

            // Decode our very crude way of encoding ground truths...
            // Components are seperated by "///", in the format:
            //       /// TEST <Number> /// <Pod Name> /// <License Text>
            var gtStrings: [String]
            do {
                gtStrings = try String(contentsOfFile: gtPath).components(separatedBy: "///")
            } catch {
                return XCTAssert(false, "Ground truth file not found or not readable")
            }
            gtStrings.removeFirst() // The 1st entry will be an empty string

            for i in 0..<acknowledgements.count {
                // For each i value, gtStrings[i * 3 + 0] is the test number,
                //                   gtStrings[i * 3 + 1] is the pod name,
                //                   gtStrings[i * 3 + 2] is the license text to compare
                //
                // We trim newlines and whitespace **surrounding** the content to avoid
                // encoding discrepencies, but not within the string itself (obviously).
                let testNumberHeader = gtStrings[i * 3].trimmingCharacters(in: .whitespaces)
                let testTitle = gtStrings[i * 3 + 1].trimmingCharacters(in: .whitespaces)
                let testLicenseText = gtStrings[i * 3 + 2].trimmingCharacters(in: .whitespacesAndNewlines)

                XCTAssertEqual(testNumberHeader, "TEST \(i + 1)")
                XCTAssertEqual(testTitle, acknowledgements[i].title)
                XCTAssertEqual(testLicenseText, acknowledgements[i].text.trimmingCharacters(in: .whitespacesAndNewlines))
            }
        }
        else {
            XCTAssert(false, "Plist not found")
        }
    }
    
    func testGeneralPerformance() {
        let bundle = Bundle(for: AcknowParserTests.self)
        let path = bundle.path(forResource: "Pods-AcknowExampleTests-acknowledgements", ofType: "plist")

        self.measure() {
            if let path = path {
                let parser = AcknowParser(plistPath: path)
                _ = parser.parseHeaderAndFooter()
                _ = parser.parseAcknowledgements()
            }
        }
    }

    func testParseNonExistentFile() {
        let parser = AcknowParser(plistPath: "/404")
        XCTAssertNil(parser.parseHeaderAndFooter().header)
        XCTAssertNil(parser.parseHeaderAndFooter().footer)
        XCTAssertTrue(parser.parseAcknowledgements().isEmpty)
    }
}
